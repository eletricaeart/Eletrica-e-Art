

// Install dependencies
// npm install next react react-dom next-auth @prisma/client @supabase/supabase-js bcryptjs cookie js-cookie

import { PrismaClient } from '@prisma/client';
import { createClient } from '@supabase/supabase-js';
import NextAuth from 'next-auth';
import GoogleProvider from 'next-auth/providers/google';
import bcrypt from 'bcryptjs';
import cookie from 'js-cookie';

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const prisma = new PrismaClient();

// next.config.js
module.exports = {
  experimental: {
    appDir: true,
  },
  env: {
    SUPABASE_URL: 'your-supabase-url',
    SUPABASE_KEY: 'your-supabase-key',
    NEXTAUTH_SECRET: 'your-nextauth-secret',
    GOOGLE_CLIENT_ID: 'your-google-client-id',
    GOOGLE_CLIENT_SECRET: 'your-google-client-secret',
  },
};

// app/layout.tsx
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}

// app/api/auth/[...nextauth]/route.ts
import { NextAuthOptions, getServerSession } from 'next-auth';

export const authOptions: NextAuthOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],
  callbacks: {
    async signIn({ user }) {
      const { email, name, image } = user;
      await prisma.user.upsert({
        where: { email },
        update: { name, image },
        create: { email, name, image },
      });
      return true;
    },
    async session({ session }) {
      const user = await prisma.user.findUnique({
        where: { email: session.user.email },
      });
      session.user = user;
      cookie.set('user', JSON.stringify(user), { secure: true });
      return session;
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
};

export default NextAuth(authOptions);

// app/page.tsx
import Link from 'next/link';

export default function LandingPage() {
  return (
    <div>
      <h1>Welcome to My App</h1>
      <Link href="/auth/login">Login</Link>
      <Link href="/auth/register">Register</Link>
    </div>
  );
}

// app/auth/register/page.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import bcrypt from 'bcryptjs';
import cookie from 'js-cookie';

export default function Register() {
  const [form, setForm] = useState({ name: '', email: '', password: '', image: '' });
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const hashedPassword = bcrypt.hashSync(form.password, 10);
    const res = await fetch('/api/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ...form, password: hashedPassword }),
    });
    if (res.ok) {
      cookie.set('user', JSON.stringify(form), { secure: true });
      router.push('/');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        placeholder="Name"
        onChange={(e) => setForm({ ...form, name: e.target.value })}
      />
      <input
        type="email"
        placeholder="Email"
        onChange={(e) => setForm({ ...form, email: e.target.value })}
      />
      <input
        type="password"
        placeholder="Password"
        onChange={(e) => setForm({ ...form, password: e.target.value })}
      />
      <input
        type="text"
        placeholder="Profile Image URL"
        onChange={(e) => setForm({ ...form, image: e.target.value })}
      />
      <button type="submit">Register</button>
    </form>
  );
}

// app/auth/login/page.tsx
'use client';

import { signIn } from 'next-auth/react';
import { useRouter } from 'next/navigation';

export default function Login() {
  const router = useRouter();

  const handleLogin = async () => {
    const result = await signIn('google');
    if (result?.ok) {
      router.push('/');
    }
  };

  return <button onClick={handleLogin}>Login with Google</button>;
}

// app/api/register/route.ts
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: Request) {
  const { name, email, password, image } = await request.json();

  try {
    await prisma.user.create({
      data: { name, email, password, image },
    });
    return NextResponse.json({ success: true });
  } catch (error) {
    return NextResponse.json({ success: false, error: error.message });
  }
}

// middleware.ts
import { getServerSession } from 'next-auth';
import { NextResponse } from 'next/server';
import { authOptions } from './app/api/auth/[...nextauth]/route';
import e from "express";
import { type } from "os";
import process from "process";

export async function middleware(req: any) {
  const session = await getServerSession(req, authOptions);
  const protectedRoutes = ['/dashboard', '/profile'];

  if (protectedRoutes.some((route) => req.nextUrl.pathname.startsWith(route)) && !session) {
    return NextResponse.redirect(new URL('/auth/login', req.url));
  }
  return NextResponse.next();
}
